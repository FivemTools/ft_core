/**
 * @Project: FivemTools
 * @Author: Samuelds
 * @License: GNU General Public License v3.0
 * @Source: https://github.com/FivemTools/ft_core
 */

function Enum(t){if(t instanceof Array){let s={},i=0;return t.forEach(t=>{s[t]=i,i++}),Object.freeze(s)}return Object.freeze(t)}
class Vector3{constructor(t=0,s=0,i=0){this.x=t,this.y=s,this.z=i}Clone(){return new Vector3(this.x,this.y,this.z)}Add(t,s,i){return t&&s&&i?(this.x+=t,this.y+=s,this.z+=i):"number"==typeof t?(this.x+=t,this.y+=t,this.z+=t):t instanceof Vector3&&(this.x+=t.x,this.y+=t.y,this.z+=t.z),this}Subtract(t,s,i){return t&&s&&i?(this.x-=t,this.y-=s,this.z-=i):"number"==typeof t?(this.x-=t,this.y-=t,this.z-=t):t instanceof Vector3&&(this.x-=t.x,this.y-=t.y,this.z-=t.z),this}Multiply(t,s,i){return t&&s&&i?(this.x*=t,this.y*=s,this.z*=i):"number"==typeof t?(this.x*=t,this.y*=t,this.z*=t):t instanceof Vector3&&(this.x*=t.x,this.y*=t.y,this.z*=t.z),this}Divide(t,s,i){return t&&s&&i?(this.x/=t,this.y/=s,this.z/=i):"number"==typeof t?(this.x/=t,this.y/=t,this.z/=t):t instanceof Vector3&&(this.x/=t.x,this.y/=t.y,this.z/=t.z),this}DotProduct(t){return this.x*t.x+this.y*t.y+this.z*t.z}CrossProduct(t){const s=this.y*t.z-this.z*t.y,i=this.z*t.x-this.z*t.z,h=this.x*t.y-this.z*t.x;return new Vector3(s,i,h)}Normalize(){return this.Divide(this.Length())}IsEquals(t,s,i){return t&&s&&i?this.x===t&&this.y===s&&this.z===i:"number"==typeof t?this.x===t&&this.y===t&&this.z===t:t instanceof Vector3?this.x===t.x&&this.y===t.y&&this.z===t.z:void 0}AngleTo(t){const s=Math.sqrt(this.Length()*t.Length());0===s&&console.error("Vector3: angleTo() can't handle zero length vectors.");const i=this.DotProduct(t)/s;return Math.acos(Math.clamp(i,-1,1))}Length(){return this.x*this.x+this.y*this.y+this.z*this.z}Max(t){return t?(this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this):Math.max(this.x,this.y,this.z)}Min(t){return t?(this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this):Math.min(this.x,this.y,this.z)}Negative(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}ToArray(){return[this.x,this.y,this.z]}DistanceTo(t){return Math.sqrt(this.DistanceToSquared(t))}DistanceToSquared(t){const s=this.x-t.x,i=this.y-t.y,h=this.z-t.z;return s*s+i*i+h*h}}